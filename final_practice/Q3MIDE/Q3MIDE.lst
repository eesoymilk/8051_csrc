                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6083 (Dec 17 2010) (MINGW32)
                              4 ; This file was generated Tue Dec 28 09:54:25 2021
                              5 ;--------------------------------------------------------
                              6 	.module Q3MIDE
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _Single_ReadI2C
                             14 	.globl _Single_WriteI2C
                             15 	.globl _I2C_RecvByte
                             16 	.globl _I2C_SendByte
                             17 	.globl _I2C_RecvACK
                             18 	.globl _I2C_SendACK
                             19 	.globl _read_adc3202
                             20 	.globl _SPI_WR
                             21 	.globl _delay_ms
                             22 	.globl _CY
                             23 	.globl _AC
                             24 	.globl _F0
                             25 	.globl _RS1
                             26 	.globl _RS0
                             27 	.globl _OV
                             28 	.globl _F1
                             29 	.globl _P
                             30 	.globl _PS
                             31 	.globl _PT1
                             32 	.globl _PX1
                             33 	.globl _PT0
                             34 	.globl _PX0
                             35 	.globl _RD
                             36 	.globl _WR
                             37 	.globl _T1
                             38 	.globl _T0
                             39 	.globl _INT1
                             40 	.globl _INT0
                             41 	.globl _TXD
                             42 	.globl _RXD
                             43 	.globl _P3_7
                             44 	.globl _P3_6
                             45 	.globl _P3_5
                             46 	.globl _P3_4
                             47 	.globl _P3_3
                             48 	.globl _P3_2
                             49 	.globl _P3_1
                             50 	.globl _P3_0
                             51 	.globl _EA
                             52 	.globl _ES
                             53 	.globl _ET1
                             54 	.globl _EX1
                             55 	.globl _ET0
                             56 	.globl _EX0
                             57 	.globl _P2_7
                             58 	.globl _P2_6
                             59 	.globl _P2_5
                             60 	.globl _P2_4
                             61 	.globl _P2_3
                             62 	.globl _P2_2
                             63 	.globl _P2_1
                             64 	.globl _P2_0
                             65 	.globl _SM0
                             66 	.globl _SM1
                             67 	.globl _SM2
                             68 	.globl _REN
                             69 	.globl _TB8
                             70 	.globl _RB8
                             71 	.globl _TI
                             72 	.globl _RI
                             73 	.globl _P1_7
                             74 	.globl _P1_6
                             75 	.globl _P1_5
                             76 	.globl _P1_4
                             77 	.globl _P1_3
                             78 	.globl _P1_2
                             79 	.globl _P1_1
                             80 	.globl _P1_0
                             81 	.globl _TF1
                             82 	.globl _TR1
                             83 	.globl _TF0
                             84 	.globl _TR0
                             85 	.globl _IE1
                             86 	.globl _IT1
                             87 	.globl _IE0
                             88 	.globl _IT0
                             89 	.globl _P0_7
                             90 	.globl _P0_6
                             91 	.globl _P0_5
                             92 	.globl _P0_4
                             93 	.globl _P0_3
                             94 	.globl _P0_2
                             95 	.globl _P0_1
                             96 	.globl _P0_0
                             97 	.globl _B
                             98 	.globl _ACC
                             99 	.globl _PSW
                            100 	.globl _IP
                            101 	.globl _P3
                            102 	.globl _IE
                            103 	.globl _P2
                            104 	.globl _SBUF
                            105 	.globl _SCON
                            106 	.globl _P1
                            107 	.globl _TH1
                            108 	.globl _TH0
                            109 	.globl _TL1
                            110 	.globl _TL0
                            111 	.globl _TMOD
                            112 	.globl _TCON
                            113 	.globl _PCON
                            114 	.globl _DPH
                            115 	.globl _DPL
                            116 	.globl _SP
                            117 	.globl _P0
                            118 	.globl _dis
                            119 	.globl _adc
                            120 	.globl _tmpc
                            121 	.globl __addr
                            122 	.globl _SSD_CODE
                            123 	.globl _delay_5
                            124 	.globl _BitExtract
                            125 	.globl _SerialDIN
                            126 	.globl _SSD_Number
                            127 	.globl _SSD_Show
                            128 	.globl _SSD_Show_Scroll
                            129 	.globl _SSD_INIT
                            130 	.globl _I2C_Start
                            131 	.globl _I2C_Stop
                            132 	.globl _delay_i2c
                            133 	.globl _readObjectTemp
                            134 	.globl _readAmbientTemp
                            135 	.globl _readTemp
                            136 ;--------------------------------------------------------
                            137 ; special function registers
                            138 ;--------------------------------------------------------
                            139 	.area RSEG    (ABS,DATA)
   0000                     140 	.org 0x0000
                    0080    141 _P0	=	0x0080
                    0081    142 _SP	=	0x0081
                    0082    143 _DPL	=	0x0082
                    0083    144 _DPH	=	0x0083
                    0087    145 _PCON	=	0x0087
                    0088    146 _TCON	=	0x0088
                    0089    147 _TMOD	=	0x0089
                    008A    148 _TL0	=	0x008a
                    008B    149 _TL1	=	0x008b
                    008C    150 _TH0	=	0x008c
                    008D    151 _TH1	=	0x008d
                    0090    152 _P1	=	0x0090
                    0098    153 _SCON	=	0x0098
                    0099    154 _SBUF	=	0x0099
                    00A0    155 _P2	=	0x00a0
                    00A8    156 _IE	=	0x00a8
                    00B0    157 _P3	=	0x00b0
                    00B8    158 _IP	=	0x00b8
                    00D0    159 _PSW	=	0x00d0
                    00E0    160 _ACC	=	0x00e0
                    00F0    161 _B	=	0x00f0
                            162 ;--------------------------------------------------------
                            163 ; special function bits
                            164 ;--------------------------------------------------------
                            165 	.area RSEG    (ABS,DATA)
   0000                     166 	.org 0x0000
                    0080    167 _P0_0	=	0x0080
                    0081    168 _P0_1	=	0x0081
                    0082    169 _P0_2	=	0x0082
                    0083    170 _P0_3	=	0x0083
                    0084    171 _P0_4	=	0x0084
                    0085    172 _P0_5	=	0x0085
                    0086    173 _P0_6	=	0x0086
                    0087    174 _P0_7	=	0x0087
                    0088    175 _IT0	=	0x0088
                    0089    176 _IE0	=	0x0089
                    008A    177 _IT1	=	0x008a
                    008B    178 _IE1	=	0x008b
                    008C    179 _TR0	=	0x008c
                    008D    180 _TF0	=	0x008d
                    008E    181 _TR1	=	0x008e
                    008F    182 _TF1	=	0x008f
                    0090    183 _P1_0	=	0x0090
                    0091    184 _P1_1	=	0x0091
                    0092    185 _P1_2	=	0x0092
                    0093    186 _P1_3	=	0x0093
                    0094    187 _P1_4	=	0x0094
                    0095    188 _P1_5	=	0x0095
                    0096    189 _P1_6	=	0x0096
                    0097    190 _P1_7	=	0x0097
                    0098    191 _RI	=	0x0098
                    0099    192 _TI	=	0x0099
                    009A    193 _RB8	=	0x009a
                    009B    194 _TB8	=	0x009b
                    009C    195 _REN	=	0x009c
                    009D    196 _SM2	=	0x009d
                    009E    197 _SM1	=	0x009e
                    009F    198 _SM0	=	0x009f
                    00A0    199 _P2_0	=	0x00a0
                    00A1    200 _P2_1	=	0x00a1
                    00A2    201 _P2_2	=	0x00a2
                    00A3    202 _P2_3	=	0x00a3
                    00A4    203 _P2_4	=	0x00a4
                    00A5    204 _P2_5	=	0x00a5
                    00A6    205 _P2_6	=	0x00a6
                    00A7    206 _P2_7	=	0x00a7
                    00A8    207 _EX0	=	0x00a8
                    00A9    208 _ET0	=	0x00a9
                    00AA    209 _EX1	=	0x00aa
                    00AB    210 _ET1	=	0x00ab
                    00AC    211 _ES	=	0x00ac
                    00AF    212 _EA	=	0x00af
                    00B0    213 _P3_0	=	0x00b0
                    00B1    214 _P3_1	=	0x00b1
                    00B2    215 _P3_2	=	0x00b2
                    00B3    216 _P3_3	=	0x00b3
                    00B4    217 _P3_4	=	0x00b4
                    00B5    218 _P3_5	=	0x00b5
                    00B6    219 _P3_6	=	0x00b6
                    00B7    220 _P3_7	=	0x00b7
                    00B0    221 _RXD	=	0x00b0
                    00B1    222 _TXD	=	0x00b1
                    00B2    223 _INT0	=	0x00b2
                    00B3    224 _INT1	=	0x00b3
                    00B4    225 _T0	=	0x00b4
                    00B5    226 _T1	=	0x00b5
                    00B6    227 _WR	=	0x00b6
                    00B7    228 _RD	=	0x00b7
                    00B8    229 _PX0	=	0x00b8
                    00B9    230 _PT0	=	0x00b9
                    00BA    231 _PX1	=	0x00ba
                    00BB    232 _PT1	=	0x00bb
                    00BC    233 _PS	=	0x00bc
                    00D0    234 _P	=	0x00d0
                    00D1    235 _F1	=	0x00d1
                    00D2    236 _OV	=	0x00d2
                    00D3    237 _RS0	=	0x00d3
                    00D4    238 _RS1	=	0x00d4
                    00D5    239 _F0	=	0x00d5
                    00D6    240 _AC	=	0x00d6
                    00D7    241 _CY	=	0x00d7
                            242 ;--------------------------------------------------------
                            243 ; overlayable register banks
                            244 ;--------------------------------------------------------
                            245 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     246 	.ds 8
                            247 ;--------------------------------------------------------
                            248 ; overlayable bit register bank
                            249 ;--------------------------------------------------------
                            250 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     251 bits:
   0000                     252 	.ds 1
                    8000    253 	b0 = bits[0]
                    8100    254 	b1 = bits[1]
                    8200    255 	b2 = bits[2]
                    8300    256 	b3 = bits[3]
                    8400    257 	b4 = bits[4]
                    8500    258 	b5 = bits[5]
                    8600    259 	b6 = bits[6]
                    8700    260 	b7 = bits[7]
                            261 ;--------------------------------------------------------
                            262 ; internal ram data
                            263 ;--------------------------------------------------------
                            264 	.area DSEG    (DATA)
   0000                     265 _SSD_CODE::
   0000                     266 	.ds 16
   0010                     267 _SSD_Show_Scroll_shift_1_1:
   0010                     268 	.ds 1
   0011                     269 __addr::
   0011                     270 	.ds 1
   0012                     271 _tmpc::
   0012                     272 	.ds 2
   0014                     273 _adc::
   0014                     274 	.ds 2
   0016                     275 _dis::
   0016                     276 	.ds 2
                            277 ;--------------------------------------------------------
                            278 ; overlayable items in internal ram 
                            279 ;--------------------------------------------------------
                            280 	.area OSEG    (OVR,DATA)
                            281 ;--------------------------------------------------------
                            282 ; Stack segment in internal ram 
                            283 ;--------------------------------------------------------
                            284 	.area	SSEG	(DATA)
   0000                     285 __start__stack:
   0000                     286 	.ds	1
                            287 
                            288 ;--------------------------------------------------------
                            289 ; indirectly addressable internal ram data
                            290 ;--------------------------------------------------------
                            291 	.area ISEG    (DATA)
                            292 ;--------------------------------------------------------
                            293 ; absolute internal ram data
                            294 ;--------------------------------------------------------
                            295 	.area IABS    (ABS,DATA)
                            296 	.area IABS    (ABS,DATA)
                            297 ;--------------------------------------------------------
                            298 ; bit data
                            299 ;--------------------------------------------------------
                            300 	.area BSEG    (BIT)
                            301 ;--------------------------------------------------------
                            302 ; paged external ram data
                            303 ;--------------------------------------------------------
                            304 	.area PSEG    (PAG,XDATA)
                            305 ;--------------------------------------------------------
                            306 ; external ram data
                            307 ;--------------------------------------------------------
                            308 	.area XSEG    (XDATA)
                            309 ;--------------------------------------------------------
                            310 ; absolute external ram data
                            311 ;--------------------------------------------------------
                            312 	.area XABS    (ABS,XDATA)
                            313 ;--------------------------------------------------------
                            314 ; external initialized ram data
                            315 ;--------------------------------------------------------
                            316 	.area XISEG   (XDATA)
                            317 	.area HOME    (CODE)
                            318 	.area GSINIT0 (CODE)
                            319 	.area GSINIT1 (CODE)
                            320 	.area GSINIT2 (CODE)
                            321 	.area GSINIT3 (CODE)
                            322 	.area GSINIT4 (CODE)
                            323 	.area GSINIT5 (CODE)
                            324 	.area GSINIT  (CODE)
                            325 	.area GSFINAL (CODE)
                            326 	.area CSEG    (CODE)
                            327 ;--------------------------------------------------------
                            328 ; interrupt vector 
                            329 ;--------------------------------------------------------
                            330 	.area HOME    (CODE)
   0000                     331 __interrupt_vect:
   0000 02s00r00            332 	ljmp	__sdcc_gsinit_startup
                            333 ;--------------------------------------------------------
                            334 ; global & static initialisations
                            335 ;--------------------------------------------------------
                            336 	.area HOME    (CODE)
                            337 	.area GSINIT  (CODE)
                            338 	.area GSFINAL (CODE)
                            339 	.area GSINIT  (CODE)
                            340 	.globl __sdcc_gsinit_startup
                            341 	.globl __sdcc_program_startup
                            342 	.globl __start__stack
                            343 	.globl __mcs51_genXINIT
                            344 	.globl __mcs51_genXRAMCLEAR
                            345 	.globl __mcs51_genRAMCLEAR
                            346 ;------------------------------------------------------------
                            347 ;Allocation info for local variables in function 'SSD_Show_Scroll'
                            348 ;------------------------------------------------------------
                            349 ;num                       Allocated to stack - offset 1
                            350 ;i                         Allocated to registers r5 r6 
                            351 ;shift                     Allocated with name '_SSD_Show_Scroll_shift_1_1'
                            352 ;------------------------------------------------------------
                            353 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:155: static UC shift = 0;
   0000 75*10 00            354 	mov	_SSD_Show_Scroll_shift_1_1,#0x00
                            355 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:22: UC SSD_CODE[] = {
   0003 75*00 7E            356 	mov	_SSD_CODE,#0x7E
   0006 75*01 30            357 	mov	(_SSD_CODE + 0x0001),#0x30
   0009 75*02 6D            358 	mov	(_SSD_CODE + 0x0002),#0x6D
   000C 75*03 79            359 	mov	(_SSD_CODE + 0x0003),#0x79
   000F 75*04 33            360 	mov	(_SSD_CODE + 0x0004),#0x33
   0012 75*05 5B            361 	mov	(_SSD_CODE + 0x0005),#0x5B
   0015 75*06 5F            362 	mov	(_SSD_CODE + 0x0006),#0x5F
   0018 75*07 70            363 	mov	(_SSD_CODE + 0x0007),#0x70
   001B 75*08 7F            364 	mov	(_SSD_CODE + 0x0008),#0x7F
   001E 75*09 7B            365 	mov	(_SSD_CODE + 0x0009),#0x7B
   0021 75*0A 77            366 	mov	(_SSD_CODE + 0x000a),#0x77
   0024 75*0B 1F            367 	mov	(_SSD_CODE + 0x000b),#0x1F
   0027 75*0C 4E            368 	mov	(_SSD_CODE + 0x000c),#0x4E
   002A 75*0D 3D            369 	mov	(_SSD_CODE + 0x000d),#0x3D
   002D 75*0E 4F            370 	mov	(_SSD_CODE + 0x000e),#0x4F
   0030 75*0F 47            371 	mov	(_SSD_CODE + 0x000f),#0x47
                            372 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:16: uint8_t  _addr = MLX90614_ADDRESS << 1;    // 0x5a --> 0xb4
   0033 75*11 B4            373 	mov	__addr,#0xB4
                            374 	.area GSFINAL (CODE)
   0000 02s00r03            375 	ljmp	__sdcc_program_startup
                            376 ;--------------------------------------------------------
                            377 ; Home
                            378 ;--------------------------------------------------------
                            379 	.area HOME    (CODE)
                            380 	.area HOME    (CODE)
   0003                     381 __sdcc_program_startup:
   0003 12s05r9F            382 	lcall	_main
                            383 ;	return from main will lock up
   0006 80 FE               384 	sjmp .
                            385 ;--------------------------------------------------------
                            386 ; code
                            387 ;--------------------------------------------------------
                            388 	.area CSEG    (CODE)
                            389 ;------------------------------------------------------------
                            390 ;Allocation info for local variables in function 'delay_ms'
                            391 ;------------------------------------------------------------
                            392 ;input_ms                  Allocated to registers r2 r3 
                            393 ;cnt1                      Allocated to registers r4 r5 
                            394 ;cnt2                      Allocated to registers r6 
                            395 ;------------------------------------------------------------
                            396 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/delay.h:4: void delay_ms(unsigned int input_ms)
                            397 ;	-----------------------------------------
                            398 ;	 function delay_ms
                            399 ;	-----------------------------------------
   0000                     400 _delay_ms:
                    0002    401 	ar2 = 0x02
                    0003    402 	ar3 = 0x03
                    0004    403 	ar4 = 0x04
                    0005    404 	ar5 = 0x05
                    0006    405 	ar6 = 0x06
                    0007    406 	ar7 = 0x07
                    0000    407 	ar0 = 0x00
                    0001    408 	ar1 = 0x01
   0000 AA 82               409 	mov	r2,dpl
   0002 AB 83               410 	mov	r3,dph
                            411 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/delay.h:9: for(cnt1 = 0; cnt1 < input_ms; cnt1 ++)
   0004 7C 00               412 	mov	r4,#0x00
   0006 7D 00               413 	mov	r5,#0x00
   0008                     414 00104$:
   0008 C3                  415 	clr	c
   0009 EC                  416 	mov	a,r4
   000A 9A                  417 	subb	a,r2
   000B ED                  418 	mov	a,r5
   000C 9B                  419 	subb	a,r3
   000D 50 0B               420 	jnc	00108$
                            421 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/delay.h:11: for(cnt2 = 0; cnt2 < 90;cnt2 ++);
   000F 7E 5A               422 	mov	r6,#0x5A
   0011                     423 00103$:
   0011 DE FE               424 	djnz	r6,00103$
                            425 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/delay.h:9: for(cnt1 = 0; cnt1 < input_ms; cnt1 ++)
   0013 0C                  426 	inc	r4
   0014 BC 00 F1            427 	cjne	r4,#0x00,00104$
   0017 0D                  428 	inc	r5
   0018 80 EE               429 	sjmp	00104$
   001A                     430 00108$:
   001A 22                  431 	ret
                            432 ;------------------------------------------------------------
                            433 ;Allocation info for local variables in function 'SPI_WR'
                            434 ;------------------------------------------------------------
                            435 ;data_in                   Allocated to registers r2 
                            436 ;data_out                  Allocated to registers r3 
                            437 ;i                         Allocated to registers r4 
                            438 ;------------------------------------------------------------
                            439 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:51: char SPI_WR(char data_in)
                            440 ;	-----------------------------------------
                            441 ;	 function SPI_WR
                            442 ;	-----------------------------------------
   001B                     443 _SPI_WR:
   001B AA 82               444 	mov	r2,dpl
                            445 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:53: char data_out = 0;
   001D 7B 00               446 	mov	r3,#0x00
                            447 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:55: for(i=0;i<8;i++)  // 8 bit transaction
   001F 7C 00               448 	mov	r4,#0x00
   0021                     449 00103$:
   0021 BC 08 00            450 	cjne	r4,#0x08,00113$
   0024                     451 00113$:
   0024 50 38               452 	jnc	00106$
                            453 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:57: data_out <<= 1;
   0026 EB                  454 	mov	a,r3
   0027 2B                  455 	add	a,r3
   0028 FB                  456 	mov	r3,a
                            457 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:59: CLK = 0;
   0029 C2 A0               458 	clr	_P2_0
                            459 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:60: delay_5();
   002B C0 02               460 	push	ar2
   002D C0 03               461 	push	ar3
   002F C0 04               462 	push	ar4
   0031 12s00rB1            463 	lcall	_delay_5
   0034 D0 04               464 	pop	ar4
   0036 D0 03               465 	pop	ar3
   0038 D0 02               466 	pop	ar2
                            467 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:61: DIN = (data_in & 0x80) ? 1 : 0;   // Send data_in via DIN to ADC (e.g. start bit, mode selection)
   003A EA                  468 	mov	a,r2
   003B 33                  469 	rlc	a
   003C 92 A1               470 	mov	_P2_1,c
                            471 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:62: delay_5();
   003E C0 02               472 	push	ar2
   0040 C0 03               473 	push	ar3
   0042 C0 04               474 	push	ar4
   0044 12s00rB1            475 	lcall	_delay_5
                            476 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:63: CLK = 1;
   0047 D2 A0               477 	setb	_P2_0
                            478 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:64: delay_5();
   0049 12s00rB1            479 	lcall	_delay_5
   004C D0 04               480 	pop	ar4
   004E D0 03               481 	pop	ar3
   0050 D0 02               482 	pop	ar2
                            483 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:66: if(DOUT == 1)   // Read DOUT
   0052 30 A2 03            484 	jnb	_P2_2,00102$
                            485 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:67: data_out = (data_out | 0x01);   // Store into data_out
   0055 43 03 01            486 	orl	ar3,#0x01
   0058                     487 00102$:
                            488 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:68: data_in <<= 1;
   0058 EA                  489 	mov	a,r2
   0059 2A                  490 	add	a,r2
   005A FA                  491 	mov	r2,a
                            492 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:55: for(i=0;i<8;i++)  // 8 bit transaction
   005B 0C                  493 	inc	r4
   005C 80 C3               494 	sjmp	00103$
   005E                     495 00106$:
                            496 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:70: return data_out;
   005E 8B 82               497 	mov	dpl,r3
   0060 22                  498 	ret
                            499 ;------------------------------------------------------------
                            500 ;Allocation info for local variables in function 'read_adc3202'
                            501 ;------------------------------------------------------------
                            502 ;channel                   Allocated to registers r2 
                            503 ;data_buff                 Allocated to registers r3 r4 
                            504 ;spi_buff                  Allocated to registers r2 
                            505 ;------------------------------------------------------------
                            506 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:73: unsigned int read_adc3202(unsigned char channel) {
                            507 ;	-----------------------------------------
                            508 ;	 function read_adc3202
                            509 ;	-----------------------------------------
   0061                     510 _read_adc3202:
   0061 AA 82               511 	mov	r2,dpl
                            512 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:78: LOAD = 0;
   0063 C2 A3               513 	clr	_P2_3
                            514 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:81: SPI_WR(0x01);               // First byte transaction includes start bit
   0065 75 82 01            515 	mov	dpl,#0x01
   0068 C0 02               516 	push	ar2
   006A 12s00r1B            517 	lcall	_SPI_WR
   006D D0 02               518 	pop	ar2
                            519 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:82: if(channel == 1)            // Channel 1: 11100000, to IR sensor
   006F BA 01 0A            520 	cjne	r2,#0x01,00102$
                            521 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:83: spi_buff = SPI_WR(0xe0);  // Second byte transaction includes mode selection and higher 4 bit ADC output
   0072 75 82 E0            522 	mov	dpl,#0xE0
   0075 12s00r1B            523 	lcall	_SPI_WR
   0078 AA 82               524 	mov	r2,dpl
   007A 80 0A               525 	sjmp	00103$
   007C                     526 00102$:
                            527 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:85: spi_buff = SPI_WR(0xa0);  // Second byte transaction includes mode selection and higher 4 bit ADC output
   007C 75 82 A0            528 	mov	dpl,#0xA0
   007F 12s00r1B            529 	lcall	_SPI_WR
   0082 AB 82               530 	mov	r3,dpl
   0084 8B 02               531 	mov	ar2,r3
   0086                     532 00103$:
                            533 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:86: data_buff = spi_buff & 0x0f;
   0086 74 0F               534 	mov	a,#0x0F
   0088 5A                  535 	anl	a,r2
                            536 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:87: data_buff <<= 8;            // Store higher 4 bit ADC output
   0089 FC                  537 	mov	r4,a
   008A 7B 00               538 	mov	r3,#0x00
                            539 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:89: spi_buff = SPI_WR(0x00);    // Third byte transaction includes lower 8 bit ADC output
   008C 75 82 00            540 	mov	dpl,#0x00
   008F C0 03               541 	push	ar3
   0091 C0 04               542 	push	ar4
   0093 12s00r1B            543 	lcall	_SPI_WR
   0096 AD 82               544 	mov	r5,dpl
   0098 D0 04               545 	pop	ar4
   009A D0 03               546 	pop	ar3
   009C 8D 02               547 	mov	ar2,r5
                            548 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:90: data_buff = data_buff | spi_buff;   // Store higher 4 bit ADC output
   009E 7D 00               549 	mov	r5,#0x00
   00A0 EA                  550 	mov	a,r2
   00A1 42 03               551 	orl	ar3,a
   00A3 ED                  552 	mov	a,r5
   00A4 42 04               553 	orl	ar4,a
                            554 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:92: LOAD = 1;  
   00A6 D2 A3               555 	setb	_P2_3
                            556 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:93: CLK = 0;
   00A8 C2 A0               557 	clr	_P2_0
                            558 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:94: DIN = 0;
   00AA C2 A1               559 	clr	_P2_1
                            560 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:96: return data_buff;
   00AC 8B 82               561 	mov	dpl,r3
   00AE 8C 83               562 	mov	dph,r4
   00B0 22                  563 	ret
                            564 ;------------------------------------------------------------
                            565 ;Allocation info for local variables in function 'delay_5'
                            566 ;------------------------------------------------------------
                            567 ;i                         Allocated to registers r2 
                            568 ;------------------------------------------------------------
                            569 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:99: void delay_5(void)
                            570 ;	-----------------------------------------
                            571 ;	 function delay_5
                            572 ;	-----------------------------------------
   00B1                     573 _delay_5:
                            574 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:102: for(i = 0; i < 5; i ++);
   00B1 7A 05               575 	mov	r2,#0x05
   00B3                     576 00103$:
   00B3 DA FE               577 	djnz	r2,00103$
   00B5 22                  578 	ret
                            579 ;------------------------------------------------------------
                            580 ;Allocation info for local variables in function 'BitExtract'
                            581 ;------------------------------------------------------------
                            582 ;bits                      Allocated to registers r2 
                            583 ;i                         Allocated to registers r3 
                            584 ;------------------------------------------------------------
                            585 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:107: void BitExtract(UC bits)
                            586 ;	-----------------------------------------
                            587 ;	 function BitExtract
                            588 ;	-----------------------------------------
   00B6                     589 _BitExtract:
   00B6 AA 82               590 	mov	r2,dpl
                            591 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:111: for (i = 0; i < 8; i++) {
   00B8 7B 00               592 	mov	r3,#0x00
   00BA                     593 00101$:
   00BA BB 08 00            594 	cjne	r3,#0x08,00110$
   00BD                     595 00110$:
   00BD 50 0C               596 	jnc	00105$
                            597 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:112: CLK = 0;
   00BF C2 A0               598 	clr	_P2_0
                            599 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:113: DIN = (bits & 0x80);
                            600 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:114: bits <<= 1;
   00C1 EA                  601 	mov	a,r2
   00C2 2A                  602 	add	a,r2
   00C3 92 A1               603 	mov	_P2_1,c
   00C5 FA                  604 	mov	r2,a
                            605 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:115: CLK = 1;
   00C6 D2 A0               606 	setb	_P2_0
                            607 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:111: for (i = 0; i < 8; i++) {
   00C8 0B                  608 	inc	r3
   00C9 80 EF               609 	sjmp	00101$
   00CB                     610 00105$:
   00CB 22                  611 	ret
                            612 ;------------------------------------------------------------
                            613 ;Allocation info for local variables in function 'SerialDIN'
                            614 ;------------------------------------------------------------
                            615 ;dat                       Allocated to stack - offset -3
                            616 ;address                   Allocated to registers r2 
                            617 ;------------------------------------------------------------
                            618 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:119: void SerialDIN(UC address, UC dat)
                            619 ;	-----------------------------------------
                            620 ;	 function SerialDIN
                            621 ;	-----------------------------------------
   00CC                     622 _SerialDIN:
   00CC C0*00               623 	push	_bp
   00CE 85 81*00            624 	mov	_bp,sp
   00D1 AA 82               625 	mov	r2,dpl
                            626 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:121: LOAD_MAX = 0;
   00D3 C2 A4               627 	clr	_P2_4
                            628 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:122: BitExtract(address);
   00D5 8A 82               629 	mov	dpl,r2
   00D7 12s00rB6            630 	lcall	_BitExtract
                            631 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:123: BitExtract(dat);
   00DA E5*00               632 	mov	a,_bp
   00DC 24 FD               633 	add	a,#0xfd
   00DE F8                  634 	mov	r0,a
   00DF 86 82               635 	mov	dpl,@r0
   00E1 12s00rB6            636 	lcall	_BitExtract
                            637 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:124: LOAD_MAX = 1;
   00E4 D2 A4               638 	setb	_P2_4
   00E6 D0*00               639 	pop	_bp
   00E8 22                  640 	ret
                            641 ;------------------------------------------------------------
                            642 ;Allocation info for local variables in function 'SSD_Number'
                            643 ;------------------------------------------------------------
                            644 ;num                       Allocated to stack - offset 1
                            645 ;i                         Allocated to registers r4 r5 
                            646 ;n                         Allocated to registers r6 r7 
                            647 ;------------------------------------------------------------
                            648 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:127: void SSD_Number(long num)
                            649 ;	-----------------------------------------
                            650 ;	 function SSD_Number
                            651 ;	-----------------------------------------
   00E9                     652 _SSD_Number:
   00E9 C0*00               653 	push	_bp
   00EB 85 81*00            654 	mov	_bp,sp
   00EE C0 82               655 	push	dpl
   00F0 C0 83               656 	push	dph
   00F2 C0 F0               657 	push	b
   00F4 C0 E0               658 	push	acc
                            659 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:131: n = num > 0 ? num : num * -1;
   00F6 A8*00               660 	mov	r0,_bp
   00F8 08                  661 	inc	r0
   00F9 C3                  662 	clr	c
   00FA E4                  663 	clr	a
   00FB 96                  664 	subb	a,@r0
   00FC E4                  665 	clr	a
   00FD 08                  666 	inc	r0
   00FE 96                  667 	subb	a,@r0
   00FF E4                  668 	clr	a
   0100 08                  669 	inc	r0
   0101 96                  670 	subb	a,@r0
   0102 74 80               671 	mov	a,#(0x00 ^ 0x80)
   0104 08                  672 	inc	r0
   0105 86 F0               673 	mov	b,@r0
   0107 63 F0 80            674 	xrl	b,#0x80
   010A 95 F0               675 	subb	a,b
   010C 50 10               676 	jnc	00115$
   010E A8*00               677 	mov	r0,_bp
   0110 08                  678 	inc	r0
   0111 86 06               679 	mov	ar6,@r0
   0113 08                  680 	inc	r0
   0114 86 07               681 	mov	ar7,@r0
   0116 08                  682 	inc	r0
   0117 86 02               683 	mov	ar2,@r0
   0119 08                  684 	inc	r0
   011A 86 03               685 	mov	ar3,@r0
   011C 80 13               686 	sjmp	00116$
   011E                     687 00115$:
   011E A8*00               688 	mov	r0,_bp
   0120 08                  689 	inc	r0
   0121 C3                  690 	clr	c
   0122 E4                  691 	clr	a
   0123 96                  692 	subb	a,@r0
   0124 FE                  693 	mov	r6,a
   0125 08                  694 	inc	r0
   0126 E4                  695 	clr	a
   0127 96                  696 	subb	a,@r0
   0128 FF                  697 	mov	r7,a
   0129 08                  698 	inc	r0
   012A E4                  699 	clr	a
   012B 96                  700 	subb	a,@r0
   012C FA                  701 	mov	r2,a
   012D 08                  702 	inc	r0
   012E E4                  703 	clr	a
   012F 96                  704 	subb	a,@r0
   0130 FB                  705 	mov	r3,a
   0131                     706 00116$:
                            707 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:133: for (i = 1; i <= 8 && n; i++) {
   0131 7A 01               708 	mov	r2,#0x01
   0133 7B 00               709 	mov	r3,#0x00
   0135                     710 00105$:
   0135 C3                  711 	clr	c
   0136 74 08               712 	mov	a,#0x08
   0138 9A                  713 	subb	a,r2
   0139 E4                  714 	clr	a
   013A 9B                  715 	subb	a,r3
   013B 40 6A               716 	jc	00125$
   013D EE                  717 	mov	a,r6
   013E 4F                  718 	orl	a,r7
   013F 60 66               719 	jz	00125$
                            720 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:134: SerialDIN(i, SSD_CODE[n % 10]);
   0141 C0 02               721 	push	ar2
   0143 C0 03               722 	push	ar3
   0145 C0 06               723 	push	ar6
   0147 C0 07               724 	push	ar7
   0149 74 0A               725 	mov	a,#0x0A
   014B C0 E0               726 	push	acc
   014D E4                  727 	clr	a
   014E C0 E0               728 	push	acc
   0150 8E 82               729 	mov	dpl,r6
   0152 8F 83               730 	mov	dph,r7
   0154 12s00r00            731 	lcall	__moduint
   0157 AC 82               732 	mov	r4,dpl
   0159 15 81               733 	dec	sp
   015B 15 81               734 	dec	sp
   015D D0 07               735 	pop	ar7
   015F D0 06               736 	pop	ar6
   0161 D0 03               737 	pop	ar3
   0163 D0 02               738 	pop	ar2
   0165 EC                  739 	mov	a,r4
   0166 24r00               740 	add	a,#_SSD_CODE
   0168 F8                  741 	mov	r0,a
   0169 86 04               742 	mov	ar4,@r0
   016B 8A 05               743 	mov	ar5,r2
   016D C0 02               744 	push	ar2
   016F C0 03               745 	push	ar3
   0171 C0 06               746 	push	ar6
   0173 C0 07               747 	push	ar7
   0175 C0 04               748 	push	ar4
   0177 8D 82               749 	mov	dpl,r5
   0179 12s00rCC            750 	lcall	_SerialDIN
   017C 15 81               751 	dec	sp
   017E D0 07               752 	pop	ar7
   0180 D0 06               753 	pop	ar6
                            754 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:135: n /= 10;
   0182 74 0A               755 	mov	a,#0x0A
   0184 C0 E0               756 	push	acc
   0186 E4                  757 	clr	a
   0187 C0 E0               758 	push	acc
   0189 8E 82               759 	mov	dpl,r6
   018B 8F 83               760 	mov	dph,r7
   018D 12s00r00            761 	lcall	__divuint
   0190 AC 82               762 	mov	r4,dpl
   0192 AD 83               763 	mov	r5,dph
   0194 15 81               764 	dec	sp
   0196 15 81               765 	dec	sp
   0198 D0 03               766 	pop	ar3
   019A D0 02               767 	pop	ar2
   019C 8C 06               768 	mov	ar6,r4
   019E 8D 07               769 	mov	ar7,r5
                            770 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:133: for (i = 1; i <= 8 && n; i++) {
   01A0 0A                  771 	inc	r2
   01A1 BA 00 91            772 	cjne	r2,#0x00,00105$
   01A4 0B                  773 	inc	r3
   01A5 80 8E               774 	sjmp	00105$
   01A7                     775 00125$:
   01A7 8A 04               776 	mov	ar4,r2
   01A9 8B 05               777 	mov	ar5,r3
                            778 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:137: if (num < 10 && i <= 8) {
   01AB A8*00               779 	mov	r0,_bp
   01AD 08                  780 	inc	r0
   01AE C3                  781 	clr	c
   01AF E6                  782 	mov	a,@r0
   01B0 94 0A               783 	subb	a,#0x0A
   01B2 08                  784 	inc	r0
   01B3 E6                  785 	mov	a,@r0
   01B4 94 00               786 	subb	a,#0x00
   01B6 08                  787 	inc	r0
   01B7 E6                  788 	mov	a,@r0
   01B8 94 00               789 	subb	a,#0x00
   01BA 08                  790 	inc	r0
   01BB E6                  791 	mov	a,@r0
   01BC 64 80               792 	xrl	a,#0x80
   01BE 94 80               793 	subb	a,#0x80
   01C0 50 22               794 	jnc	00102$
   01C2 C3                  795 	clr	c
   01C3 74 08               796 	mov	a,#0x08
   01C5 9A                  797 	subb	a,r2
   01C6 E4                  798 	clr	a
   01C7 9B                  799 	subb	a,r3
   01C8 40 1A               800 	jc	00102$
                            801 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:138: SerialDIN(i++, 0x01);
   01CA 74 01               802 	mov	a,#0x01
   01CC 2A                  803 	add	a,r2
   01CD FC                  804 	mov	r4,a
   01CE E4                  805 	clr	a
   01CF 3B                  806 	addc	a,r3
   01D0 FD                  807 	mov	r5,a
   01D1 C0 04               808 	push	ar4
   01D3 C0 05               809 	push	ar5
   01D5 74 01               810 	mov	a,#0x01
   01D7 C0 E0               811 	push	acc
   01D9 8A 82               812 	mov	dpl,r2
   01DB 12s00rCC            813 	lcall	_SerialDIN
   01DE 15 81               814 	dec	sp
   01E0 D0 05               815 	pop	ar5
   01E2 D0 04               816 	pop	ar4
   01E4                     817 00102$:
                            818 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:140: for (i++; i <= 8; i++)
   01E4 0C                  819 	inc	r4
   01E5 BC 00 01            820 	cjne	r4,#0x00,00133$
   01E8 0D                  821 	inc	r5
   01E9                     822 00133$:
   01E9 8C 02               823 	mov	ar2,r4
   01EB 8D 03               824 	mov	ar3,r5
   01ED                     825 00109$:
   01ED C3                  826 	clr	c
   01EE 74 08               827 	mov	a,#0x08
   01F0 9A                  828 	subb	a,r2
   01F1 E4                  829 	clr	a
   01F2 9B                  830 	subb	a,r3
   01F3 40 1B               831 	jc	00113$
                            832 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:141: SerialDIN(i, 0);
   01F5 8A 04               833 	mov	ar4,r2
   01F7 C0 02               834 	push	ar2
   01F9 C0 03               835 	push	ar3
   01FB E4                  836 	clr	a
   01FC C0 E0               837 	push	acc
   01FE 8C 82               838 	mov	dpl,r4
   0200 12s00rCC            839 	lcall	_SerialDIN
   0203 15 81               840 	dec	sp
   0205 D0 03               841 	pop	ar3
   0207 D0 02               842 	pop	ar2
                            843 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:140: for (i++; i <= 8; i++)
   0209 0A                  844 	inc	r2
   020A BA 00 E0            845 	cjne	r2,#0x00,00109$
   020D 0B                  846 	inc	r3
   020E 80 DD               847 	sjmp	00109$
   0210                     848 00113$:
   0210 85*00 81            849 	mov	sp,_bp
   0213 D0*00               850 	pop	_bp
   0215 22                  851 	ret
                            852 ;------------------------------------------------------------
                            853 ;Allocation info for local variables in function 'SSD_Show'
                            854 ;------------------------------------------------------------
                            855 ;num                       Allocated to stack - offset 1
                            856 ;i                         Allocated to registers r5 r6 
                            857 ;------------------------------------------------------------
                            858 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:144: void SSD_Show(UC* num)
                            859 ;	-----------------------------------------
                            860 ;	 function SSD_Show
                            861 ;	-----------------------------------------
   0216                     862 _SSD_Show:
   0216 C0*00               863 	push	_bp
   0218 85 81*00            864 	mov	_bp,sp
   021B C0 82               865 	push	dpl
   021D C0 83               866 	push	dph
   021F C0 F0               867 	push	b
                            868 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:148: for (i = 1; i <= 8; i++)
   0221 7D 01               869 	mov	r5,#0x01
   0223 7E 00               870 	mov	r6,#0x00
   0225                     871 00101$:
   0225 C3                  872 	clr	c
   0226 74 08               873 	mov	a,#0x08
   0228 9D                  874 	subb	a,r5
   0229 E4                  875 	clr	a
   022A 9E                  876 	subb	a,r6
   022B 40 3D               877 	jc	00105$
                            878 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:149: SerialDIN(i, SSD_CODE[num[8 - i]]);
   022D 74 08               879 	mov	a,#0x08
   022F C3                  880 	clr	c
   0230 9D                  881 	subb	a,r5
   0231 FF                  882 	mov	r7,a
   0232 E4                  883 	clr	a
   0233 9E                  884 	subb	a,r6
   0234 FA                  885 	mov	r2,a
   0235 A8*00               886 	mov	r0,_bp
   0237 08                  887 	inc	r0
   0238 EF                  888 	mov	a,r7
   0239 26                  889 	add	a,@r0
   023A FF                  890 	mov	r7,a
   023B EA                  891 	mov	a,r2
   023C 08                  892 	inc	r0
   023D 36                  893 	addc	a,@r0
   023E FA                  894 	mov	r2,a
   023F 08                  895 	inc	r0
   0240 86 03               896 	mov	ar3,@r0
   0242 8F 82               897 	mov	dpl,r7
   0244 8A 83               898 	mov	dph,r2
   0246 8B F0               899 	mov	b,r3
   0248 12s00r00            900 	lcall	__gptrget
   024B 24r00               901 	add	a,#_SSD_CODE
   024D F8                  902 	mov	r0,a
   024E 86 02               903 	mov	ar2,@r0
   0250 8D 03               904 	mov	ar3,r5
   0252 C0 05               905 	push	ar5
   0254 C0 06               906 	push	ar6
   0256 C0 02               907 	push	ar2
   0258 8B 82               908 	mov	dpl,r3
   025A 12s00rCC            909 	lcall	_SerialDIN
   025D 15 81               910 	dec	sp
   025F D0 06               911 	pop	ar6
   0261 D0 05               912 	pop	ar5
                            913 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:148: for (i = 1; i <= 8; i++)
   0263 0D                  914 	inc	r5
   0264 BD 00 BE            915 	cjne	r5,#0x00,00101$
   0267 0E                  916 	inc	r6
   0268 80 BB               917 	sjmp	00101$
   026A                     918 00105$:
   026A 85*00 81            919 	mov	sp,_bp
   026D D0*00               920 	pop	_bp
   026F 22                  921 	ret
                            922 ;------------------------------------------------------------
                            923 ;Allocation info for local variables in function 'SSD_Show_Scroll'
                            924 ;------------------------------------------------------------
                            925 ;num                       Allocated to stack - offset 1
                            926 ;i                         Allocated to registers r5 r6 
                            927 ;shift                     Allocated with name '_SSD_Show_Scroll_shift_1_1'
                            928 ;------------------------------------------------------------
                            929 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:152: void SSD_Show_Scroll(UC* num)
                            930 ;	-----------------------------------------
                            931 ;	 function SSD_Show_Scroll
                            932 ;	-----------------------------------------
   0270                     933 _SSD_Show_Scroll:
   0270 C0*00               934 	push	_bp
   0272 85 81*00            935 	mov	_bp,sp
   0275 C0 82               936 	push	dpl
   0277 C0 83               937 	push	dph
   0279 C0 F0               938 	push	b
                            939 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:157: for (i = 1; i <= 8; i++)
   027B 7D 01               940 	mov	r5,#0x01
   027D 7E 00               941 	mov	r6,#0x00
   027F                     942 00103$:
   027F C3                  943 	clr	c
   0280 74 08               944 	mov	a,#0x08
   0282 9D                  945 	subb	a,r5
   0283 E4                  946 	clr	a
   0284 9E                  947 	subb	a,r6
   0285 40 4B               948 	jc	00106$
                            949 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:158: SerialDIN(i, SSD_CODE[num[(8 - i + shift) % 8]]);
   0287 74 08               950 	mov	a,#0x08
   0289 C3                  951 	clr	c
   028A 9D                  952 	subb	a,r5
   028B FF                  953 	mov	r7,a
   028C E4                  954 	clr	a
   028D 9E                  955 	subb	a,r6
   028E FA                  956 	mov	r2,a
   028F AB*10               957 	mov	r3,_SSD_Show_Scroll_shift_1_1
   0291 7C 00               958 	mov	r4,#0x00
   0293 EB                  959 	mov	a,r3
   0294 2F                  960 	add	a,r7
   0295 FF                  961 	mov	r7,a
   0296 EC                  962 	mov	a,r4
   0297 3A                  963 	addc	a,r2
   0298 53 07 07            964 	anl	ar7,#0x07
   029B 7A 00               965 	mov	r2,#0x00
   029D A8*00               966 	mov	r0,_bp
   029F 08                  967 	inc	r0
   02A0 EF                  968 	mov	a,r7
   02A1 26                  969 	add	a,@r0
   02A2 FF                  970 	mov	r7,a
   02A3 EA                  971 	mov	a,r2
   02A4 08                  972 	inc	r0
   02A5 36                  973 	addc	a,@r0
   02A6 FA                  974 	mov	r2,a
   02A7 08                  975 	inc	r0
   02A8 86 03               976 	mov	ar3,@r0
   02AA 8F 82               977 	mov	dpl,r7
   02AC 8A 83               978 	mov	dph,r2
   02AE 8B F0               979 	mov	b,r3
   02B0 12s00r00            980 	lcall	__gptrget
   02B3 24r00               981 	add	a,#_SSD_CODE
   02B5 F8                  982 	mov	r0,a
   02B6 86 02               983 	mov	ar2,@r0
   02B8 8D 03               984 	mov	ar3,r5
   02BA C0 05               985 	push	ar5
   02BC C0 06               986 	push	ar6
   02BE C0 02               987 	push	ar2
   02C0 8B 82               988 	mov	dpl,r3
   02C2 12s00rCC            989 	lcall	_SerialDIN
   02C5 15 81               990 	dec	sp
   02C7 D0 06               991 	pop	ar6
   02C9 D0 05               992 	pop	ar5
                            993 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:157: for (i = 1; i <= 8; i++)
   02CB 0D                  994 	inc	r5
   02CC BD 00 B0            995 	cjne	r5,#0x00,00103$
   02CF 0E                  996 	inc	r6
   02D0 80 AD               997 	sjmp	00103$
   02D2                     998 00106$:
                            999 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:159: shift++;
   02D2 05*10              1000 	inc	_SSD_Show_Scroll_shift_1_1
                           1001 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:160: if (shift == 8) shift = 0;
   02D4 74 08              1002 	mov	a,#0x08
   02D6 B5*10 03           1003 	cjne	a,_SSD_Show_Scroll_shift_1_1,00102$
   02D9 75*10 00           1004 	mov	_SSD_Show_Scroll_shift_1_1,#0x00
   02DC                    1005 00102$:
                           1006 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:162: delay_ms(1000);
   02DC 90 03 E8           1007 	mov	dptr,#0x03E8
   02DF 12s00r00           1008 	lcall	_delay_ms
   02E2 85*00 81           1009 	mov	sp,_bp
   02E5 D0*00              1010 	pop	_bp
   02E7 22                 1011 	ret
                           1012 ;------------------------------------------------------------
                           1013 ;Allocation info for local variables in function 'SSD_INIT'
                           1014 ;------------------------------------------------------------
                           1015 ;i                         Allocated to registers r2 
                           1016 ;------------------------------------------------------------
                           1017 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:165: void SSD_INIT()
                           1018 ;	-----------------------------------------
                           1019 ;	 function SSD_INIT
                           1020 ;	-----------------------------------------
   02E8                    1021 _SSD_INIT:
                           1022 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:169: SerialDIN(SHUTDOWN,     0x01);  // Normal mode (0xX1)
   02E8 74 01              1023 	mov	a,#0x01
   02EA C0 E0              1024 	push	acc
   02EC 75 82 0C           1025 	mov	dpl,#0x0C
   02EF 12s00rCC           1026 	lcall	_SerialDIN
   02F2 15 81              1027 	dec	sp
                           1028 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:170: SerialDIN(DISPLAY_TEST, 0x00);  // Overwrite SHUTDOWN
   02F4 E4                 1029 	clr	a
   02F5 C0 E0              1030 	push	acc
   02F7 75 82 0F           1031 	mov	dpl,#0x0F
   02FA 12s00rCC           1032 	lcall	_SerialDIN
   02FD 15 81              1033 	dec	sp
                           1034 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:171: SerialDIN(DECODE_MODE,  0x00);  // no decoding
   02FF E4                 1035 	clr	a
   0300 C0 E0              1036 	push	acc
   0302 75 82 09           1037 	mov	dpl,#0x09
   0305 12s00rCC           1038 	lcall	_SerialDIN
   0308 15 81              1039 	dec	sp
                           1040 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:172: SerialDIN(SCAN_LIMIT,   0x07);  // use all 8 digits
   030A 74 07              1041 	mov	a,#0x07
   030C C0 E0              1042 	push	acc
   030E 75 82 0B           1043 	mov	dpl,#0x0B
   0311 12s00rCC           1044 	lcall	_SerialDIN
   0314 15 81              1045 	dec	sp
                           1046 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:173: SerialDIN(INTENSITY,    0x0E);  // brightness
   0316 74 0E              1047 	mov	a,#0x0E
   0318 C0 E0              1048 	push	acc
   031A 75 82 0A           1049 	mov	dpl,#0x0A
   031D 12s00rCC           1050 	lcall	_SerialDIN
   0320 15 81              1051 	dec	sp
                           1052 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:175: for (i = 1; i <= 8; i++)
   0322 7A 01              1053 	mov	r2,#0x01
   0324                    1054 00101$:
   0324 74 08              1055 	mov	a,#0x08
   0326 B5 02 00           1056 	cjne	a,ar2,00110$
   0329                    1057 00110$:
   0329 40 11              1058 	jc	00105$
                           1059 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:176: SerialDIN(i, 0);
   032B C0 02              1060 	push	ar2
   032D E4                 1061 	clr	a
   032E C0 E0              1062 	push	acc
   0330 8A 82              1063 	mov	dpl,r2
   0332 12s00rCC           1064 	lcall	_SerialDIN
   0335 15 81              1065 	dec	sp
   0337 D0 02              1066 	pop	ar2
                           1067 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/adc_ssd.h:175: for (i = 1; i <= 8; i++)
   0339 0A                 1068 	inc	r2
   033A 80 E8              1069 	sjmp	00101$
   033C                    1070 00105$:
   033C 22                 1071 	ret
                           1072 ;------------------------------------------------------------
                           1073 ;Allocation info for local variables in function 'I2C_Start'
                           1074 ;------------------------------------------------------------
                           1075 ;------------------------------------------------------------
                           1076 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:24: void I2C_Start(void)
                           1077 ;	-----------------------------------------
                           1078 ;	 function I2C_Start
                           1079 ;	-----------------------------------------
   033D                    1080 _I2C_Start:
                           1081 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:26: SDA = 0;                    
   033D C2 81              1082 	clr	_P0_1
                           1083 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:27: delay_i2c();                  
   033F 12s04r60           1084 	lcall	_delay_i2c
                           1085 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:28: SCL = 0;                    
   0342 C2 80              1086 	clr	_P0_0
                           1087 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:29: delay_i2c();                  
   0344 02s04r60           1088 	ljmp	_delay_i2c
                           1089 ;------------------------------------------------------------
                           1090 ;Allocation info for local variables in function 'I2C_Stop'
                           1091 ;------------------------------------------------------------
                           1092 ;------------------------------------------------------------
                           1093 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:34: void I2C_Stop(void)
                           1094 ;	-----------------------------------------
                           1095 ;	 function I2C_Stop
                           1096 ;	-----------------------------------------
   0347                    1097 _I2C_Stop:
                           1098 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:36: SDA = 0;                    
   0347 C2 81              1099 	clr	_P0_1
                           1100 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:37: delay_i2c();                  
   0349 12s04r60           1101 	lcall	_delay_i2c
                           1102 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:38: SCL = 1;                    
   034C D2 80              1103 	setb	_P0_0
                           1104 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:39: delay_i2c();                  
   034E 12s04r60           1105 	lcall	_delay_i2c
                           1106 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:40: SDA = 1;                    
   0351 D2 81              1107 	setb	_P0_1
                           1108 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:41: delay_i2c();                  
   0353 02s04r60           1109 	ljmp	_delay_i2c
                           1110 ;------------------------------------------------------------
                           1111 ;Allocation info for local variables in function 'I2C_SendACK'
                           1112 ;------------------------------------------------------------
                           1113 ;ack                       Allocated to registers 
                           1114 ;------------------------------------------------------------
                           1115 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:46: void I2C_SendACK(__bit ack)
                           1116 ;	-----------------------------------------
                           1117 ;	 function I2C_SendACK
                           1118 ;	-----------------------------------------
   0356                    1119 _I2C_SendACK:
   0356 A2*00              1120 	mov	c,b0
   0358 92 81              1121 	mov	_P0_1,c
                           1122 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:49: delay_i2c();                  
   035A 12s04r60           1123 	lcall	_delay_i2c
                           1124 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:50: SCL = 1;                    
   035D D2 80              1125 	setb	_P0_0
                           1126 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:51: delay_i2c();                  
   035F 12s04r60           1127 	lcall	_delay_i2c
                           1128 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:52: SCL = 0;                    
   0362 C2 80              1129 	clr	_P0_0
                           1130 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:53: delay_i2c();                  
   0364 02s04r60           1131 	ljmp	_delay_i2c
                           1132 ;------------------------------------------------------------
                           1133 ;Allocation info for local variables in function 'I2C_RecvACK'
                           1134 ;------------------------------------------------------------
                           1135 ;------------------------------------------------------------
                           1136 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:58: __sbit I2C_RecvACK()
                           1137 ;	-----------------------------------------
                           1138 ;	 function I2C_RecvACK
                           1139 ;	-----------------------------------------
   0367                    1140 _I2C_RecvACK:
                           1141 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:60: delay_i2c();  
   0367 12s04r60           1142 	lcall	_delay_i2c
                           1143 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:61: SDA = 1;                 
   036A D2 81              1144 	setb	_P0_1
                           1145 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:62: delay_i2c();      
   036C 12s04r60           1146 	lcall	_delay_i2c
                           1147 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:63: SCL = 1;    
   036F D2 80              1148 	setb	_P0_0
                           1149 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:64: delay_i2c();                  
   0371 12s04r60           1150 	lcall	_delay_i2c
                           1151 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:65: CY = SDA;                   
   0374 A2 81              1152 	mov	c,_P0_1
   0376 92 D7              1153 	mov	_CY,c
                           1154 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:66: delay_i2c();                  
   0378 12s04r60           1155 	lcall	_delay_i2c
                           1156 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:67: SCL = 0;                    
   037B C2 80              1157 	clr	_P0_0
                           1158 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:68: delay_i2c();                  
   037D 12s04r60           1159 	lcall	_delay_i2c
                           1160 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:69: return CY;
   0380 A2 D7              1161 	mov	c,_CY
   0382 22                 1162 	ret
                           1163 ;------------------------------------------------------------
                           1164 ;Allocation info for local variables in function 'I2C_SendByte'
                           1165 ;------------------------------------------------------------
                           1166 ;dat                       Allocated to registers r2 
                           1167 ;i                         Allocated to registers r3 
                           1168 ;------------------------------------------------------------
                           1169 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:75: void I2C_SendByte(uint8_t dat)
                           1170 ;	-----------------------------------------
                           1171 ;	 function I2C_SendByte
                           1172 ;	-----------------------------------------
   0383                    1173 _I2C_SendByte:
   0383 AA 82              1174 	mov	r2,dpl
                           1175 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:78: for (i=0; i<8; i++)         
   0385 7B 00              1176 	mov	r3,#0x00
   0387                    1177 00104$:
   0387 BB 08 00           1178 	cjne	r3,#0x08,00114$
   038A                    1179 00114$:
   038A 50 25              1180 	jnc	00107$
                           1181 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:80: if(dat & 0x80)
   038C EA                 1182 	mov	a,r2
   038D 30 E7 04           1183 	jnb	acc.7,00102$
                           1184 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:81: SDA = 1;               
   0390 D2 81              1185 	setb	_P0_1
   0392 80 02              1186 	sjmp	00103$
   0394                    1187 00102$:
                           1188 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:83: SDA = 0;               
   0394 C2 81              1189 	clr	_P0_1
   0396                    1190 00103$:
                           1191 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:84: delay_i2c();                  
   0396 C0 02              1192 	push	ar2
   0398 C0 03              1193 	push	ar3
   039A 12s04r60           1194 	lcall	_delay_i2c
                           1195 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:85: SCL = 1;                
   039D D2 80              1196 	setb	_P0_0
                           1197 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:86: delay_i2c();                  
   039F 12s04r60           1198 	lcall	_delay_i2c
                           1199 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:87: SCL = 0;                
   03A2 C2 80              1200 	clr	_P0_0
                           1201 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:88: delay_i2c();                  
   03A4 12s04r60           1202 	lcall	_delay_i2c
   03A7 D0 03              1203 	pop	ar3
   03A9 D0 02              1204 	pop	ar2
                           1205 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:89: dat <<= 1;              
   03AB EA                 1206 	mov	a,r2
   03AC 2A                 1207 	add	a,r2
   03AD FA                 1208 	mov	r2,a
                           1209 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:78: for (i=0; i<8; i++)         
   03AE 0B                 1210 	inc	r3
   03AF 80 D6              1211 	sjmp	00104$
   03B1                    1212 00107$:
                           1213 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:91: I2C_RecvACK();
   03B1 02s03r67           1214 	ljmp	_I2C_RecvACK
                           1215 ;------------------------------------------------------------
                           1216 ;Allocation info for local variables in function 'I2C_RecvByte'
                           1217 ;------------------------------------------------------------
                           1218 ;i                         Allocated to registers r3 
                           1219 ;dat                       Allocated to registers r2 
                           1220 ;------------------------------------------------------------
                           1221 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:96: uint8_t I2C_RecvByte()
                           1222 ;	-----------------------------------------
                           1223 ;	 function I2C_RecvByte
                           1224 ;	-----------------------------------------
   03B4                    1225 _I2C_RecvByte:
                           1226 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:99: uint8_t dat = 0;
   03B4 7A 00              1227 	mov	r2,#0x00
                           1228 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:100: SDA = 1;                    
   03B6 D2 81              1229 	setb	_P0_1
                           1230 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:101: for (i=0; i<8; i++)         
   03B8 7B 00              1231 	mov	r3,#0x00
   03BA                    1232 00101$:
   03BA BB 08 00           1233 	cjne	r3,#0x08,00110$
   03BD                    1234 00110$:
   03BD 50 29              1235 	jnc	00104$
                           1236 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:103: dat <<= 1;
   03BF EA                 1237 	mov	a,r2
   03C0 2A                 1238 	add	a,r2
   03C1 FA                 1239 	mov	r2,a
                           1240 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:104: SCL = 1;                
   03C2 D2 80              1241 	setb	_P0_0
                           1242 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:105: delay_i2c();                  
   03C4 C0 02              1243 	push	ar2
   03C6 C0 03              1244 	push	ar3
   03C8 12s04r60           1245 	lcall	_delay_i2c
   03CB D0 03              1246 	pop	ar3
   03CD D0 02              1247 	pop	ar2
                           1248 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:106: dat |= SDA;             
   03CF A2 81              1249 	mov	c,_P0_1
   03D1 E4                 1250 	clr	a
   03D2 33                 1251 	rlc	a
   03D3 42 02              1252 	orl	ar2,a
                           1253 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:107: delay_i2c();                                
   03D5 C0 02              1254 	push	ar2
   03D7 C0 03              1255 	push	ar3
   03D9 12s04r60           1256 	lcall	_delay_i2c
                           1257 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:108: SCL = 0;                
   03DC C2 80              1258 	clr	_P0_0
                           1259 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:109: delay_i2c();                  
   03DE 12s04r60           1260 	lcall	_delay_i2c
   03E1 D0 03              1261 	pop	ar3
   03E3 D0 02              1262 	pop	ar2
                           1263 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:101: for (i=0; i<8; i++)         
   03E5 0B                 1264 	inc	r3
   03E6 80 D2              1265 	sjmp	00101$
   03E8                    1266 00104$:
                           1267 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:111: return dat;
   03E8 8A 82              1268 	mov	dpl,r2
   03EA 22                 1269 	ret
                           1270 ;------------------------------------------------------------
                           1271 ;Allocation info for local variables in function 'Single_WriteI2C'
                           1272 ;------------------------------------------------------------
                           1273 ;REG_Address               Allocated to stack - offset -3
                           1274 ;REG_data                  Allocated to stack - offset -4
                           1275 ;SlaveAddress              Allocated to registers r2 
                           1276 ;------------------------------------------------------------
                           1277 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:116: void Single_WriteI2C(uint8_t SlaveAddress, uint8_t REG_Address,uint8_t REG_data)
                           1278 ;	-----------------------------------------
                           1279 ;	 function Single_WriteI2C
                           1280 ;	-----------------------------------------
   03EB                    1281 _Single_WriteI2C:
   03EB C0*00              1282 	push	_bp
   03ED 85 81*00           1283 	mov	_bp,sp
   03F0 AA 82              1284 	mov	r2,dpl
                           1285 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:118: I2C_Start();                  
   03F2 C0 02              1286 	push	ar2
   03F4 12s03r3D           1287 	lcall	_I2C_Start
   03F7 D0 02              1288 	pop	ar2
                           1289 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:119: I2C_SendByte(SlaveAddress);   
   03F9 8A 82              1290 	mov	dpl,r2
   03FB 12s03r83           1291 	lcall	_I2C_SendByte
                           1292 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:120: I2C_SendByte(REG_Address);    
   03FE E5*00              1293 	mov	a,_bp
   0400 24 FD              1294 	add	a,#0xfd
   0402 F8                 1295 	mov	r0,a
   0403 86 82              1296 	mov	dpl,@r0
   0405 12s03r83           1297 	lcall	_I2C_SendByte
                           1298 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:121: I2C_SendByte(REG_data);       
   0408 E5*00              1299 	mov	a,_bp
   040A 24 FC              1300 	add	a,#0xfc
   040C F8                 1301 	mov	r0,a
   040D 86 82              1302 	mov	dpl,@r0
   040F 12s03r83           1303 	lcall	_I2C_SendByte
                           1304 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:122: I2C_Stop();                   
   0412 12s03r47           1305 	lcall	_I2C_Stop
   0415 D0*00              1306 	pop	_bp
   0417 22                 1307 	ret
                           1308 ;------------------------------------------------------------
                           1309 ;Allocation info for local variables in function 'Single_ReadI2C'
                           1310 ;------------------------------------------------------------
                           1311 ;REG_Address               Allocated to stack - offset -3
                           1312 ;SlaveAddress              Allocated to registers r2 
                           1313 ;REG_data                  Allocated to registers r2 
                           1314 ;------------------------------------------------------------
                           1315 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:127: uint8_t Single_ReadI2C(uint8_t SlaveAddress, uint8_t REG_Address)
                           1316 ;	-----------------------------------------
                           1317 ;	 function Single_ReadI2C
                           1318 ;	-----------------------------------------
   0418                    1319 _Single_ReadI2C:
   0418 C0*00              1320 	push	_bp
   041A 85 81*00           1321 	mov	_bp,sp
   041D AA 82              1322 	mov	r2,dpl
                           1323 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:130: I2C_Start();                   
   041F C0 02              1324 	push	ar2
   0421 12s03r3D           1325 	lcall	_I2C_Start
   0424 D0 02              1326 	pop	ar2
                           1327 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:131: I2C_SendByte(SlaveAddress);    
   0426 8A 82              1328 	mov	dpl,r2
   0428 C0 02              1329 	push	ar2
   042A 12s03r83           1330 	lcall	_I2C_SendByte
                           1331 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:132: I2C_SendByte(REG_Address);       
   042D E5*00              1332 	mov	a,_bp
   042F 24 FD              1333 	add	a,#0xfd
   0431 F8                 1334 	mov	r0,a
   0432 86 82              1335 	mov	dpl,@r0
   0434 12s03r83           1336 	lcall	_I2C_SendByte
                           1337 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:133: I2C_Stop();                    
   0437 12s03r47           1338 	lcall	_I2C_Stop
                           1339 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:135: I2C_Start();                   
   043A 12s03r3D           1340 	lcall	_I2C_Start
   043D D0 02              1341 	pop	ar2
                           1342 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:136: I2C_SendByte(SlaveAddress|0x01);  
   043F 74 01              1343 	mov	a,#0x01
   0441 4A                 1344 	orl	a,r2
   0442 F5 82              1345 	mov	dpl,a
   0444 12s03r83           1346 	lcall	_I2C_SendByte
                           1347 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:137: REG_data=I2C_RecvByte();       
   0447 12s03rB4           1348 	lcall	_I2C_RecvByte
   044A AA 82              1349 	mov	r2,dpl
                           1350 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:138: I2C_SendACK(1);                
   044C D2 F0              1351 	setb	b[0]
   044E C0 02              1352 	push	ar2
   0450 85 F0*00           1353 	mov	bits,b
   0453 12s03r56           1354 	lcall	_I2C_SendACK
                           1355 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:139: I2C_Stop();                    
   0456 12s03r47           1356 	lcall	_I2C_Stop
   0459 D0 02              1357 	pop	ar2
                           1358 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:140: return REG_data;
   045B 8A 82              1359 	mov	dpl,r2
   045D D0*00              1360 	pop	_bp
   045F 22                 1361 	ret
                           1362 ;------------------------------------------------------------
                           1363 ;Allocation info for local variables in function 'delay_i2c'
                           1364 ;------------------------------------------------------------
                           1365 ;i                         Allocated to registers r2 
                           1366 ;------------------------------------------------------------
                           1367 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:159: void delay_i2c(void)
                           1368 ;	-----------------------------------------
                           1369 ;	 function delay_i2c
                           1370 ;	-----------------------------------------
   0460                    1371 _delay_i2c:
                           1372 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/i2c.h:162: for(i = 0; i < 5; i ++);    
   0460 7A 05              1373 	mov	r2,#0x05
   0462                    1374 00103$:
   0462 DA FE              1375 	djnz	r2,00103$
   0464 22                 1376 	ret
                           1377 ;------------------------------------------------------------
                           1378 ;Allocation info for local variables in function 'readObjectTemp'
                           1379 ;------------------------------------------------------------
                           1380 ;------------------------------------------------------------
                           1381 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:18: double readObjectTemp(void) {
                           1382 ;	-----------------------------------------
                           1383 ;	 function readObjectTemp
                           1384 ;	-----------------------------------------
   0465                    1385 _readObjectTemp:
                           1386 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:19: return readTemp(OBJECT_TEMP);
   0465 75 82 07           1387 	mov	dpl,#0x07
   0468 02s04r71           1388 	ljmp	_readTemp
                           1389 ;------------------------------------------------------------
                           1390 ;Allocation info for local variables in function 'readAmbientTemp'
                           1391 ;------------------------------------------------------------
                           1392 ;------------------------------------------------------------
                           1393 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:22: double readAmbientTemp(void) {
                           1394 ;	-----------------------------------------
                           1395 ;	 function readAmbientTemp
                           1396 ;	-----------------------------------------
   046B                    1397 _readAmbientTemp:
                           1398 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:23: return readTemp(AMBIENT_TEMP);
   046B 75 82 06           1399 	mov	dpl,#0x06
   046E 02s04r71           1400 	ljmp	_readTemp
                           1401 ;------------------------------------------------------------
                           1402 ;Allocation info for local variables in function 'readTemp'
                           1403 ;------------------------------------------------------------
                           1404 ;reg                       Allocated to registers r2 
                           1405 ;temp                      Allocated to registers r2 r3 r4 r5 
                           1406 ;tempData                  Allocated to registers r2 r3 
                           1407 ;pec                       Allocated to registers 
                           1408 ;sloc0                     Allocated to stack - offset 1
                           1409 ;------------------------------------------------------------
                           1410 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:26: float readTemp(uint8_t reg) {
                           1411 ;	-----------------------------------------
                           1412 ;	 function readTemp
                           1413 ;	-----------------------------------------
   0471                    1414 _readTemp:
   0471 C0*00              1415 	push	_bp
   0473 E5 81              1416 	mov	a,sp
   0475 F5*00              1417 	mov	_bp,a
   0477 24 04              1418 	add	a,#0x04
   0479 F5 81              1419 	mov	sp,a
   047B AA 82              1420 	mov	r2,dpl
                           1421 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:31: I2C_Start();
   047D C0 02              1422 	push	ar2
   047F 12s03r3D           1423 	lcall	_I2C_Start
                           1424 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:32: I2C_SendByte(_addr);            // 0xb4
   0482 85*11 82           1425 	mov	dpl,__addr
   0485 12s03r83           1426 	lcall	_I2C_SendByte
   0488 D0 02              1427 	pop	ar2
                           1428 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:33: I2C_SendByte(reg);
   048A 8A 82              1429 	mov	dpl,r2
   048C 12s03r83           1430 	lcall	_I2C_SendByte
                           1431 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:34: SDA = 1;                        // pull up 2 wires to restart
   048F D2 81              1432 	setb	_P0_1
                           1433 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:35: SCL = 1;                        
   0491 D2 80              1434 	setb	_P0_0
                           1435 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:36: I2C_Start();                    // restart
   0493 12s03r3D           1436 	lcall	_I2C_Start
                           1437 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:37: I2C_SendByte(_addr|0x01);       // 0xb4 --> 0xb5
   0496 74 01              1438 	mov	a,#0x01
   0498 45*11              1439 	orl	a,__addr
   049A F5 82              1440 	mov	dpl,a
   049C 12s03r83           1441 	lcall	_I2C_SendByte
                           1442 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:38: tempData = I2C_RecvByte();      // LSByte
   049F 12s03rB4           1443 	lcall	_I2C_RecvByte
   04A2 AA 82              1444 	mov	r2,dpl
   04A4 7B 00              1445 	mov	r3,#0x00
                           1446 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:39: I2C_SendACK(0);
   04A6 C2 F0              1447 	clr	b[0]
   04A8 C0 02              1448 	push	ar2
   04AA C0 03              1449 	push	ar3
   04AC 85 F0*00           1450 	mov	bits,b
   04AF 12s03r56           1451 	lcall	_I2C_SendACK
                           1452 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:40: tempData |= I2C_RecvByte() << 8;  // { MSByte , LSByte } 
   04B2 12s03rB4           1453 	lcall	_I2C_RecvByte
   04B5 AC 82              1454 	mov	r4,dpl
   04B7 D0 03              1455 	pop	ar3
   04B9 D0 02              1456 	pop	ar2
   04BB 8C 05              1457 	mov	ar5,r4
   04BD E4                 1458 	clr	a
   04BE 42 02              1459 	orl	ar2,a
   04C0 ED                 1460 	mov	a,r5
   04C1 42 03              1461 	orl	ar3,a
                           1462 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:41: I2C_SendACK(0);
   04C3 C2 F0              1463 	clr	b[0]
   04C5 C0 02              1464 	push	ar2
   04C7 C0 03              1465 	push	ar3
   04C9 85 F0*00           1466 	mov	bits,b
   04CC 12s03r56           1467 	lcall	_I2C_SendACK
                           1468 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:42: pec = I2C_RecvByte();           // 8-bit pec 
   04CF 12s03rB4           1469 	lcall	_I2C_RecvByte
                           1470 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:43: I2C_SendACK(1);
   04D2 D2 F0              1471 	setb	b[0]
   04D4 85 F0*00           1472 	mov	bits,b
   04D7 12s03r56           1473 	lcall	_I2C_SendACK
                           1474 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:44: I2C_Stop();
   04DA 12s03r47           1475 	lcall	_I2C_Stop
   04DD D0 03              1476 	pop	ar3
   04DF D0 02              1477 	pop	ar2
                           1478 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:45: temp = tempData;               // raw 16-bit tempData 
   04E1 8A 82              1479 	mov	dpl,r2
   04E3 8B 83              1480 	mov	dph,r3
   04E5 12s00r00           1481 	lcall	___uint2fs
   04E8 AA 82              1482 	mov	r2,dpl
   04EA AB 83              1483 	mov	r3,dph
   04EC AC F0              1484 	mov	r4,b
   04EE FD                 1485 	mov	r5,a
                           1486 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:46: temp *= 0.02;                  // calculate temperature in Celsius 
   04EF C0 02              1487 	push	ar2
   04F1 C0 03              1488 	push	ar3
   04F3 C0 04              1489 	push	ar4
   04F5 C0 05              1490 	push	ar5
   04F7 90 D7 0A           1491 	mov	dptr,#0xD70A
   04FA 75 F0 A3           1492 	mov	b,#0xA3
   04FD 74 3C              1493 	mov	a,#0x3C
   04FF 12s00r00           1494 	lcall	___fsmul
   0502 A8*00              1495 	mov	r0,_bp
   0504 08                 1496 	inc	r0
   0505 A6 82              1497 	mov	@r0,dpl
   0507 08                 1498 	inc	r0
   0508 A6 83              1499 	mov	@r0,dph
   050A 08                 1500 	inc	r0
   050B A6 F0              1501 	mov	@r0,b
   050D 08                 1502 	inc	r0
   050E F6                 1503 	mov	@r0,a
   050F E5 81              1504 	mov	a,sp
   0511 24 FC              1505 	add	a,#0xfc
   0513 F5 81              1506 	mov	sp,a
   0515 A8*00              1507 	mov	r0,_bp
   0517 08                 1508 	inc	r0
   0518 86 02              1509 	mov	ar2,@r0
   051A 08                 1510 	inc	r0
   051B 86 03              1511 	mov	ar3,@r0
   051D 08                 1512 	inc	r0
   051E 86 04              1513 	mov	ar4,@r0
   0520 08                 1514 	inc	r0
   0521 86 05              1515 	mov	ar5,@r0
                           1516 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:47: temp -= 273.15;
   0523 74 33              1517 	mov	a,#0x33
   0525 C0 E0              1518 	push	acc
   0527 74 93              1519 	mov	a,#0x93
   0529 C0 E0              1520 	push	acc
   052B 74 88              1521 	mov	a,#0x88
   052D C0 E0              1522 	push	acc
   052F 74 43              1523 	mov	a,#0x43
   0531 C0 E0              1524 	push	acc
   0533 8A 82              1525 	mov	dpl,r2
   0535 8B 83              1526 	mov	dph,r3
   0537 8C F0              1527 	mov	b,r4
   0539 ED                 1528 	mov	a,r5
   053A 12s00r00           1529 	lcall	___fssub
   053D A8*00              1530 	mov	r0,_bp
   053F 08                 1531 	inc	r0
   0540 A6 82              1532 	mov	@r0,dpl
   0542 08                 1533 	inc	r0
   0543 A6 83              1534 	mov	@r0,dph
   0545 08                 1535 	inc	r0
   0546 A6 F0              1536 	mov	@r0,b
   0548 08                 1537 	inc	r0
   0549 F6                 1538 	mov	@r0,a
   054A E5 81              1539 	mov	a,sp
   054C 24 FC              1540 	add	a,#0xfc
   054E F5 81              1541 	mov	sp,a
   0550 A8*00              1542 	mov	r0,_bp
   0552 08                 1543 	inc	r0
   0553 86 02              1544 	mov	ar2,@r0
   0555 08                 1545 	inc	r0
   0556 86 03              1546 	mov	ar3,@r0
   0558 08                 1547 	inc	r0
   0559 86 04              1548 	mov	ar4,@r0
   055B 08                 1549 	inc	r0
   055C 86 05              1550 	mov	ar5,@r0
                           1551 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:48: temp = temp * 10 ;             // in order to show 1 decimal bit
   055E C0 02              1552 	push	ar2
   0560 C0 03              1553 	push	ar3
   0562 C0 04              1554 	push	ar4
   0564 C0 05              1555 	push	ar5
   0566 90 00 00           1556 	mov	dptr,#0x0000
   0569 75 F0 20           1557 	mov	b,#0x20
   056C 74 41              1558 	mov	a,#0x41
   056E 12s00r00           1559 	lcall	___fsmul
   0571 A8*00              1560 	mov	r0,_bp
   0573 08                 1561 	inc	r0
   0574 A6 82              1562 	mov	@r0,dpl
   0576 08                 1563 	inc	r0
   0577 A6 83              1564 	mov	@r0,dph
   0579 08                 1565 	inc	r0
   057A A6 F0              1566 	mov	@r0,b
   057C 08                 1567 	inc	r0
   057D F6                 1568 	mov	@r0,a
   057E E5 81              1569 	mov	a,sp
   0580 24 FC              1570 	add	a,#0xfc
   0582 F5 81              1571 	mov	sp,a
   0584 A8*00              1572 	mov	r0,_bp
   0586 08                 1573 	inc	r0
   0587 86 02              1574 	mov	ar2,@r0
   0589 08                 1575 	inc	r0
   058A 86 03              1576 	mov	ar3,@r0
   058C 08                 1577 	inc	r0
   058D 86 04              1578 	mov	ar4,@r0
   058F 08                 1579 	inc	r0
   0590 86 05              1580 	mov	ar5,@r0
                           1581 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\/MLX90614.h:50: return temp;
   0592 8A 82              1582 	mov	dpl,r2
   0594 8B 83              1583 	mov	dph,r3
   0596 8C F0              1584 	mov	b,r4
   0598 ED                 1585 	mov	a,r5
   0599 85*00 81           1586 	mov	sp,_bp
   059C D0*00              1587 	pop	_bp
   059E 22                 1588 	ret
                           1589 ;------------------------------------------------------------
                           1590 ;Allocation info for local variables in function 'main'
                           1591 ;------------------------------------------------------------
                           1592 ;------------------------------------------------------------
                           1593 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\Q3MIDE.c:14: void main(){
                           1594 ;	-----------------------------------------
                           1595 ;	 function main
                           1596 ;	-----------------------------------------
   059F                    1597 _main:
                           1598 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\Q3MIDE.c:16: DOUT = 1; //Setting gpio input mode
   059F D2 A2              1599 	setb	_P2_2
                           1600 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\Q3MIDE.c:17: LOAD = 1; 
   05A1 D2 A3              1601 	setb	_P2_3
                           1602 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\Q3MIDE.c:18: CLK = 0;
   05A3 C2 A0              1603 	clr	_P2_0
                           1604 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\Q3MIDE.c:19: DIN = 0;
   05A5 C2 A1              1605 	clr	_P2_1
                           1606 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\Q3MIDE.c:20: SSD_INIT();
   05A7 12s02rE8           1607 	lcall	_SSD_INIT
                           1608 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\Q3MIDE.c:22: while(1)
   05AA                    1609 00102$:
                           1610 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\Q3MIDE.c:24: adc = read_adc3202(1);    // Read voltage from ADC channel 1
   05AA 75 82 01           1611 	mov	dpl,#0x01
   05AD 12s00r61           1612 	lcall	_read_adc3202
   05B0 85 82*14           1613 	mov	_adc,dpl
   05B3 85 83*15           1614 	mov	(_adc + 1),dph
                           1615 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\Q3MIDE.c:25: SerialDIN(4,SSD_CODE[adc / 1000] | 0x80);
   05B6 74 E8              1616 	mov	a,#0xE8
   05B8 C0 E0              1617 	push	acc
   05BA 74 03              1618 	mov	a,#0x03
   05BC C0 E0              1619 	push	acc
   05BE 85*14 82           1620 	mov	dpl,_adc
   05C1 85*15 83           1621 	mov	dph,(_adc + 1)
   05C4 12s00r00           1622 	lcall	__divuint
   05C7 AA 82              1623 	mov	r2,dpl
   05C9 15 81              1624 	dec	sp
   05CB 15 81              1625 	dec	sp
   05CD EA                 1626 	mov	a,r2
   05CE 24r00              1627 	add	a,#_SSD_CODE
   05D0 F8                 1628 	mov	r0,a
   05D1 86 02              1629 	mov	ar2,@r0
   05D3 43 02 80           1630 	orl	ar2,#0x80
   05D6 C0 02              1631 	push	ar2
   05D8 75 82 04           1632 	mov	dpl,#0x04
   05DB 12s00rCC           1633 	lcall	_SerialDIN
   05DE 15 81              1634 	dec	sp
                           1635 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\Q3MIDE.c:26: SerialDIN(3,SSD_CODE[adc % 1000 / 100]);
   05E0 74 E8              1636 	mov	a,#0xE8
   05E2 C0 E0              1637 	push	acc
   05E4 74 03              1638 	mov	a,#0x03
   05E6 C0 E0              1639 	push	acc
   05E8 85*14 82           1640 	mov	dpl,_adc
   05EB 85*15 83           1641 	mov	dph,(_adc + 1)
   05EE 12s00r00           1642 	lcall	__moduint
   05F1 AA 82              1643 	mov	r2,dpl
   05F3 AB 83              1644 	mov	r3,dph
   05F5 15 81              1645 	dec	sp
   05F7 15 81              1646 	dec	sp
   05F9 74 64              1647 	mov	a,#0x64
   05FB C0 E0              1648 	push	acc
   05FD E4                 1649 	clr	a
   05FE C0 E0              1650 	push	acc
   0600 8A 82              1651 	mov	dpl,r2
   0602 8B 83              1652 	mov	dph,r3
   0604 12s00r00           1653 	lcall	__divuint
   0607 AA 82              1654 	mov	r2,dpl
   0609 15 81              1655 	dec	sp
   060B 15 81              1656 	dec	sp
   060D EA                 1657 	mov	a,r2
   060E 24r00              1658 	add	a,#_SSD_CODE
   0610 F8                 1659 	mov	r0,a
   0611 86 02              1660 	mov	ar2,@r0
   0613 C0 02              1661 	push	ar2
   0615 75 82 03           1662 	mov	dpl,#0x03
   0618 12s00rCC           1663 	lcall	_SerialDIN
   061B 15 81              1664 	dec	sp
                           1665 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\Q3MIDE.c:27: SerialDIN(2,SSD_CODE[adc % 100 / 10]);
   061D 74 64              1666 	mov	a,#0x64
   061F C0 E0              1667 	push	acc
   0621 E4                 1668 	clr	a
   0622 C0 E0              1669 	push	acc
   0624 85*14 82           1670 	mov	dpl,_adc
   0627 85*15 83           1671 	mov	dph,(_adc + 1)
   062A 12s00r00           1672 	lcall	__moduint
   062D AA 82              1673 	mov	r2,dpl
   062F AB 83              1674 	mov	r3,dph
   0631 15 81              1675 	dec	sp
   0633 15 81              1676 	dec	sp
   0635 74 0A              1677 	mov	a,#0x0A
   0637 C0 E0              1678 	push	acc
   0639 E4                 1679 	clr	a
   063A C0 E0              1680 	push	acc
   063C 8A 82              1681 	mov	dpl,r2
   063E 8B 83              1682 	mov	dph,r3
   0640 12s00r00           1683 	lcall	__divuint
   0643 AA 82              1684 	mov	r2,dpl
   0645 15 81              1685 	dec	sp
   0647 15 81              1686 	dec	sp
   0649 EA                 1687 	mov	a,r2
   064A 24r00              1688 	add	a,#_SSD_CODE
   064C F8                 1689 	mov	r0,a
   064D 86 02              1690 	mov	ar2,@r0
   064F C0 02              1691 	push	ar2
   0651 75 82 02           1692 	mov	dpl,#0x02
   0654 12s00rCC           1693 	lcall	_SerialDIN
   0657 15 81              1694 	dec	sp
                           1695 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\Q3MIDE.c:28: SerialDIN(1,SSD_CODE[adc % 10]);
   0659 74 0A              1696 	mov	a,#0x0A
   065B C0 E0              1697 	push	acc
   065D E4                 1698 	clr	a
   065E C0 E0              1699 	push	acc
   0660 85*14 82           1700 	mov	dpl,_adc
   0663 85*15 83           1701 	mov	dph,(_adc + 1)
   0666 12s00r00           1702 	lcall	__moduint
   0669 AA 82              1703 	mov	r2,dpl
   066B 15 81              1704 	dec	sp
   066D 15 81              1705 	dec	sp
   066F EA                 1706 	mov	a,r2
   0670 24r00              1707 	add	a,#_SSD_CODE
   0672 F8                 1708 	mov	r0,a
   0673 86 02              1709 	mov	ar2,@r0
   0675 C0 02              1710 	push	ar2
   0677 75 82 01           1711 	mov	dpl,#0x01
   067A 12s00rCC           1712 	lcall	_SerialDIN
   067D 15 81              1713 	dec	sp
                           1714 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\Q3MIDE.c:30: tmpc = readObjectTemp();
   067F 12s04r65           1715 	lcall	_readObjectTemp
   0682 12s00r00           1716 	lcall	___fs2sint
   0685 85 82*12           1717 	mov	_tmpc,dpl
   0688 85 83*13           1718 	mov	(_tmpc + 1),dph
                           1719 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\Q3MIDE.c:31: SerialDIN(7,SSD_CODE[tmpc % 1000 / 100]);
   068B 74 E8              1720 	mov	a,#0xE8
   068D C0 E0              1721 	push	acc
   068F 74 03              1722 	mov	a,#0x03
   0691 C0 E0              1723 	push	acc
   0693 85*12 82           1724 	mov	dpl,_tmpc
   0696 85*13 83           1725 	mov	dph,(_tmpc + 1)
   0699 12s00r00           1726 	lcall	__modsint
   069C AA 82              1727 	mov	r2,dpl
   069E AB 83              1728 	mov	r3,dph
   06A0 15 81              1729 	dec	sp
   06A2 15 81              1730 	dec	sp
   06A4 74 64              1731 	mov	a,#0x64
   06A6 C0 E0              1732 	push	acc
   06A8 E4                 1733 	clr	a
   06A9 C0 E0              1734 	push	acc
   06AB 8A 82              1735 	mov	dpl,r2
   06AD 8B 83              1736 	mov	dph,r3
   06AF 12s00r00           1737 	lcall	__divsint
   06B2 AA 82              1738 	mov	r2,dpl
   06B4 15 81              1739 	dec	sp
   06B6 15 81              1740 	dec	sp
   06B8 EA                 1741 	mov	a,r2
   06B9 24r00              1742 	add	a,#_SSD_CODE
   06BB F8                 1743 	mov	r0,a
   06BC 86 02              1744 	mov	ar2,@r0
   06BE C0 02              1745 	push	ar2
   06C0 75 82 07           1746 	mov	dpl,#0x07
   06C3 12s00rCC           1747 	lcall	_SerialDIN
   06C6 15 81              1748 	dec	sp
                           1749 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\Q3MIDE.c:32: SerialDIN(6,SSD_CODE[tmpc % 100 / 10] | 0x80);
   06C8 74 64              1750 	mov	a,#0x64
   06CA C0 E0              1751 	push	acc
   06CC E4                 1752 	clr	a
   06CD C0 E0              1753 	push	acc
   06CF 85*12 82           1754 	mov	dpl,_tmpc
   06D2 85*13 83           1755 	mov	dph,(_tmpc + 1)
   06D5 12s00r00           1756 	lcall	__modsint
   06D8 AA 82              1757 	mov	r2,dpl
   06DA AB 83              1758 	mov	r3,dph
   06DC 15 81              1759 	dec	sp
   06DE 15 81              1760 	dec	sp
   06E0 74 0A              1761 	mov	a,#0x0A
   06E2 C0 E0              1762 	push	acc
   06E4 E4                 1763 	clr	a
   06E5 C0 E0              1764 	push	acc
   06E7 8A 82              1765 	mov	dpl,r2
   06E9 8B 83              1766 	mov	dph,r3
   06EB 12s00r00           1767 	lcall	__divsint
   06EE AA 82              1768 	mov	r2,dpl
   06F0 15 81              1769 	dec	sp
   06F2 15 81              1770 	dec	sp
   06F4 EA                 1771 	mov	a,r2
   06F5 24r00              1772 	add	a,#_SSD_CODE
   06F7 F8                 1773 	mov	r0,a
   06F8 86 02              1774 	mov	ar2,@r0
   06FA 43 02 80           1775 	orl	ar2,#0x80
   06FD C0 02              1776 	push	ar2
   06FF 75 82 06           1777 	mov	dpl,#0x06
   0702 12s00rCC           1778 	lcall	_SerialDIN
   0705 15 81              1779 	dec	sp
                           1780 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\Q3MIDE.c:33: SerialDIN(5,SSD_CODE[tmpc % 10]);
   0707 74 0A              1781 	mov	a,#0x0A
   0709 C0 E0              1782 	push	acc
   070B E4                 1783 	clr	a
   070C C0 E0              1784 	push	acc
   070E 85*12 82           1785 	mov	dpl,_tmpc
   0711 85*13 83           1786 	mov	dph,(_tmpc + 1)
   0714 12s00r00           1787 	lcall	__modsint
   0717 AA 82              1788 	mov	r2,dpl
   0719 15 81              1789 	dec	sp
   071B 15 81              1790 	dec	sp
   071D EA                 1791 	mov	a,r2
   071E 24r00              1792 	add	a,#_SSD_CODE
   0720 F8                 1793 	mov	r0,a
   0721 86 02              1794 	mov	ar2,@r0
   0723 C0 02              1795 	push	ar2
   0725 75 82 05           1796 	mov	dpl,#0x05
   0728 12s00rCC           1797 	lcall	_SerialDIN
   072B 15 81              1798 	dec	sp
                           1799 ;	E:\GitHub\8051_csrc\final_practice\Q3MIDE\Q3MIDE.c:44: delay_ms(100);
   072D 90 00 64           1800 	mov	dptr,#0x0064
   0730 12s00r00           1801 	lcall	_delay_ms
   0733 02s05rAA           1802 	ljmp	00102$
                           1803 	.area CSEG    (CODE)
                           1804 	.area CONST   (CODE)
                           1805 	.area XINIT   (CODE)
                           1806 	.area CABS    (ABS,CODE)
